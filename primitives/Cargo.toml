[package]
name = "bitcoin-primitives"
version = "0.1.0"
authors = ["Andrew Poelstra <apoelstra@wpsoftware.net>"]
license = "CC0-1.0"
repository = "https://github.com/rust-bitcoin/rust-bitcoin"
description = "Primitive types used by the rust-bitcoin eccosystem"
categories = ["cryptography::cryptocurrencies"]
keywords = ["bitcoin", "types"]
readme = "README.md"
edition = "2021"
rust-version = "1.56.1"
exclude = ["tests", "contrib"]

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[features]
default = ["std"]
std = ["bech32/std", "hashes/std", "hex/std", "internals/std", "io/std", "units/std"]
bitcoinconsensus-std = ["bitcoinconsensus/std", "std"]
rand-std = ["secp256k1/rand-std", "std"]
serde = ["actual-serde", "hashes/serde", "hex/serde", "internals/serde", "units/serde"]
base58-std = ["base58/std", "std"]
bech32-std = ["bech32/std", "std"]

# The "crypto" feature is a bit gnarly to use because `secp256k1` has various features.
crypto = ["secp256k1"]
# `std` builds and `serde` users can use these two.
crypto-std = ["crypto", "std", "secp256k1/std", "secp256k1/hashes-std"]
crypto-serde = ["crypto", "serde", "secp256k1/serde"]
# And we provide a bunch of "typical" feature sets. If none of these are suitable add an explicit
# dependency on `secp256k1` and enable what you need. Remember to enable `crypto` in this crate as
# well.
crypto-std-serde = ["crypto-std", "crypto-serde"]
crypto-std-global = ["crypto-std", "secp256k1/global-context"]
crypto-std-global-serde = ["crypto-std-serde", "crypto-std-global"]

[dependencies]
hashes = { package = "bitcoin_hashes", version = "0.14.0", default-features = false, features = ["alloc", "io"] }
hex = { package = "hex-conservative", version = "0.2.0", default-features = false, features = ["alloc"] }
hex_lit = "0.1.1"
internals = { package = "bitcoin-internals", version = "0.3.0", features = ["alloc"] }
io = { package = "bitcoin-io", version = "0.1.1", default-features = false, features = ["alloc"] }
units = { package = "bitcoin-units", version = "0.1.0", default-features = false, features = ["alloc"] }

base58 = { package = "base58ck", version = "0.1.0", default-features = false, optional = true }
bech32 = { version = "0.11.0", default-features = false, features = ["alloc"], optional = true }

# Only use this feature for no-std builds, otherwise use `bitcoinconsensus-std`.
bitcoinconsensus = { version = "0.106.0+26", default-features = false, optional = true }
# Enables implementations of `ArbitraryOrd` on some structs.
ordered = { version = "0.2.0", optional = true }
# Only use this feature directly if you don't like the feature sets in any of the `crypto-` features.
secp256k1 = { version = "0.29.0", default-features = false, features = ["hashes"], optional = true }

# Do NOT use this as a feature! Use the `serde` feature instead.
actual-serde = { package = "serde", version = "1.0.103", default-features = false, features = [ "derive", "alloc" ], optional = true }

[dev-dependencies]
secp256k1 = { version = "0.29.0", features = ["rand-std"] }
bincode = "1.3.1"
serde_json = "1.0.0"
serde_test = "1.0.19"

[lints.rust]
unexpected_cfgs = { level = "deny", check-cfg = ['cfg(bench)', 'cfg(fuzzing)', 'cfg(kani)', 'cfg(mutate)', 'cfg(rust_v_1_60)'] }
