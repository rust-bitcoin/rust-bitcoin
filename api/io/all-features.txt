impl !core::panic::unwind_safe::RefUnwindSafe for bitcoin_io::Error
impl !core::panic::unwind_safe::UnwindSafe for bitcoin_io::Error
impl bitcoin_io::BufRead for &[u8]
impl bitcoin_io::BufRead for alloc::collections::vec_deque::VecDeque<u8>
impl bitcoin_io::BufRead for std::io::stdio::StdinLock<'_>
impl bitcoin_io::BufRead for std::io::util::Empty
impl bitcoin_io::Error
impl bitcoin_io::Read for &[u8]
impl bitcoin_io::Read for &std::fs::File
impl bitcoin_io::Read for &std::io::stdio::Stdin
impl bitcoin_io::Read for &std::net::tcp::TcpStream
impl bitcoin_io::Read for &std::os::unix::net::stream::UnixStream
impl bitcoin_io::Read for alloc::collections::vec_deque::VecDeque<u8>
impl bitcoin_io::Read for alloc::sync::Arc<std::fs::File>
impl bitcoin_io::Read for std::fs::File
impl bitcoin_io::Read for std::io::stdio::Stdin
impl bitcoin_io::Read for std::io::stdio::StdinLock<'_>
impl bitcoin_io::Read for std::io::util::Empty
impl bitcoin_io::Read for std::io::util::Repeat
impl bitcoin_io::Read for std::net::tcp::TcpStream
impl bitcoin_io::Read for std::os::unix::net::stream::UnixStream
impl bitcoin_io::Read for std::process::ChildStderr
impl bitcoin_io::Read for std::process::ChildStdout
impl bitcoin_io::Write for &mut [u8]
impl bitcoin_io::Write for &std::fs::File
impl bitcoin_io::Write for &std::io::stdio::Stderr
impl bitcoin_io::Write for &std::io::stdio::Stdout
impl bitcoin_io::Write for &std::io::util::Empty
impl bitcoin_io::Write for &std::net::tcp::TcpStream
impl bitcoin_io::Write for &std::os::unix::net::stream::UnixStream
impl bitcoin_io::Write for &std::process::ChildStdin
impl bitcoin_io::Write for alloc::collections::vec_deque::VecDeque<u8>
impl bitcoin_io::Write for alloc::sync::Arc<std::fs::File>
impl bitcoin_io::Write for alloc::vec::Vec<u8>
impl bitcoin_io::Write for bitcoin_hashes::hash160::HashEngine
impl bitcoin_io::Write for bitcoin_hashes::ripemd160::HashEngine
impl bitcoin_io::Write for bitcoin_hashes::sha1::HashEngine
impl bitcoin_io::Write for bitcoin_hashes::sha256::HashEngine
impl bitcoin_io::Write for bitcoin_hashes::sha256d::HashEngine
impl bitcoin_io::Write for bitcoin_hashes::sha384::HashEngine
impl bitcoin_io::Write for bitcoin_hashes::sha512::HashEngine
impl bitcoin_io::Write for bitcoin_hashes::sha512_256::HashEngine
impl bitcoin_io::Write for bitcoin_hashes::siphash24::HashEngine
impl bitcoin_io::Write for bitcoin_io::Sink
impl bitcoin_io::Write for std::fs::File
impl bitcoin_io::Write for std::io::cursor::Cursor<&mut alloc::vec::Vec<u8>>
impl bitcoin_io::Write for std::io::cursor::Cursor<alloc::boxed::Box<[u8]>>
impl bitcoin_io::Write for std::io::cursor::Cursor<alloc::vec::Vec<u8>>
impl bitcoin_io::Write for std::io::stdio::Stderr
impl bitcoin_io::Write for std::io::stdio::Stdout
impl bitcoin_io::Write for std::io::util::Empty
impl bitcoin_io::Write for std::net::tcp::TcpStream
impl bitcoin_io::Write for std::os::unix::net::stream::UnixStream
impl bitcoin_io::Write for std::process::ChildStdin
impl core::clone::Clone for bitcoin_io::ErrorKind
impl core::clone::Clone for bitcoin_io::Sink
impl core::cmp::Eq for bitcoin_io::ErrorKind
impl core::cmp::PartialEq for bitcoin_io::ErrorKind
impl core::convert::From<bitcoin_io::Error> for std::io::error::Error
impl core::convert::From<bitcoin_io::ErrorKind> for bitcoin_io::Error
impl core::convert::From<core::convert::Infallible> for bitcoin_io::ErrorKind
impl core::convert::From<std::io::error::Error> for bitcoin_io::Error
impl core::default::Default for bitcoin_io::Sink
impl core::error::Error for bitcoin_io::Error
impl core::fmt::Debug for bitcoin_io::Error
impl core::fmt::Debug for bitcoin_io::ErrorKind
impl core::fmt::Debug for bitcoin_io::Sink
impl core::fmt::Display for bitcoin_io::Error
impl core::hash::Hash for bitcoin_io::ErrorKind
impl core::marker::Copy for bitcoin_io::ErrorKind
impl core::marker::Copy for bitcoin_io::Sink
impl core::marker::Freeze for bitcoin_io::Error
impl core::marker::Freeze for bitcoin_io::ErrorKind
impl core::marker::Freeze for bitcoin_io::Sink
impl core::marker::Send for bitcoin_io::Error
impl core::marker::Send for bitcoin_io::ErrorKind
impl core::marker::Send for bitcoin_io::Sink
impl core::marker::StructuralPartialEq for bitcoin_io::ErrorKind
impl core::marker::Sync for bitcoin_io::Error
impl core::marker::Sync for bitcoin_io::ErrorKind
impl core::marker::Sync for bitcoin_io::Sink
impl core::marker::Unpin for bitcoin_io::Error
impl core::marker::Unpin for bitcoin_io::ErrorKind
impl core::marker::Unpin for bitcoin_io::Sink
impl core::panic::unwind_safe::RefUnwindSafe for bitcoin_io::ErrorKind
impl core::panic::unwind_safe::RefUnwindSafe for bitcoin_io::Sink
impl core::panic::unwind_safe::UnwindSafe for bitcoin_io::ErrorKind
impl core::panic::unwind_safe::UnwindSafe for bitcoin_io::Sink
impl std::io::Write for bitcoin_io::Sink
impl<'a, R: core::fmt::Debug + bitcoin_io::Read + ?core::marker::Sized> core::fmt::Debug for bitcoin_io::Take<'a, R>
impl<'a, R> !core::panic::unwind_safe::UnwindSafe for bitcoin_io::Take<'a, R>
impl<'a, R> core::marker::Freeze for bitcoin_io::Take<'a, R> where R: ?core::marker::Sized
impl<'a, R> core::marker::Send for bitcoin_io::Take<'a, R> where R: core::marker::Send + ?core::marker::Sized
impl<'a, R> core::marker::Sync for bitcoin_io::Take<'a, R> where R: core::marker::Sync + ?core::marker::Sized
impl<'a, R> core::marker::Unpin for bitcoin_io::Take<'a, R> where R: ?core::marker::Sized
impl<'a, R> core::panic::unwind_safe::RefUnwindSafe for bitcoin_io::Take<'a, R> where R: core::panic::unwind_safe::RefUnwindSafe + ?core::marker::Sized
impl<R1: std::io::BufRead, R2: std::io::BufRead> bitcoin_io::BufRead for std::io::Chain<R1, R2>
impl<R1: std::io::Read, R2: std::io::Read> bitcoin_io::Read for std::io::Chain<R1, R2>
impl<R: bitcoin_io::BufRead + ?core::marker::Sized> bitcoin_io::BufRead for bitcoin_io::Take<'_, R>
impl<R: bitcoin_io::Read + ?core::marker::Sized> bitcoin_io::Read for bitcoin_io::Take<'_, R>
impl<R: bitcoin_io::Read + ?core::marker::Sized> bitcoin_io::Take<'_, R>
impl<R: std::io::BufRead> bitcoin_io::BufRead for std::io::Take<R>
impl<R: std::io::Read> bitcoin_io::Read for std::io::Take<R>
impl<R> bitcoin_io::BufRead for std::io::buffered::bufreader::BufReader<R> where R: ?core::marker::Sized + std::io::Read
impl<R> bitcoin_io::Read for std::io::buffered::bufreader::BufReader<R> where R: ?core::marker::Sized + std::io::Read
impl<T: bitcoin_hashes::HashEngine> bitcoin_io::Write for bitcoin_hashes::hmac::HmacEngine<T>
impl<T: bitcoin_hashes::sha256t::Tag> bitcoin_io::Write for bitcoin_hashes::sha256t::HashEngine<T>
impl<T: bitcoin_io::BufRead> bitcoin_io::BufRead for &mut T
impl<T: bitcoin_io::BufRead> bitcoin_io::BufRead for bitcoin_io::ToStd<T>
impl<T: bitcoin_io::BufRead> std::io::BufRead for bitcoin_io::ToStd<T>
impl<T: bitcoin_io::Read> bitcoin_io::Read for &mut T
impl<T: bitcoin_io::Read> bitcoin_io::Read for bitcoin_io::ToStd<T>
impl<T: bitcoin_io::Read> std::io::Read for bitcoin_io::ToStd<T>
impl<T: bitcoin_io::Write> bitcoin_io::Write for &mut T
impl<T: bitcoin_io::Write> bitcoin_io::Write for bitcoin_io::ToStd<T>
impl<T: bitcoin_io::Write> std::io::Write for bitcoin_io::ToStd<T>
impl<T: core::clone::Clone> core::clone::Clone for bitcoin_io::Cursor<T>
impl<T: core::cmp::Eq> core::cmp::Eq for bitcoin_io::Cursor<T>
impl<T: core::cmp::PartialEq> core::cmp::PartialEq for bitcoin_io::Cursor<T>
impl<T: core::convert::AsRef<[u8]>> bitcoin_io::BufRead for bitcoin_io::Cursor<T>
impl<T: core::convert::AsRef<[u8]>> bitcoin_io::BufRead for std::io::cursor::Cursor<T>
impl<T: core::convert::AsRef<[u8]>> bitcoin_io::Cursor<T>
impl<T: core::convert::AsRef<[u8]>> bitcoin_io::Read for bitcoin_io::Cursor<T>
impl<T: core::convert::AsRef<[u8]>> bitcoin_io::Read for std::io::cursor::Cursor<T>
impl<T: core::default::Default> core::default::Default for bitcoin_io::Cursor<T>
impl<T: core::fmt::Debug> core::fmt::Debug for bitcoin_io::Cursor<T>
impl<T: core::fmt::Debug> core::fmt::Debug for bitcoin_io::FromStd<T>
impl<T: core::fmt::Debug> core::fmt::Debug for bitcoin_io::ToStd<T>
impl<T: std::io::BufRead> bitcoin_io::BufRead for bitcoin_io::FromStd<T>
impl<T: std::io::BufRead> std::io::BufRead for bitcoin_io::FromStd<T>
impl<T: std::io::Read> bitcoin_io::Read for bitcoin_io::FromStd<T>
impl<T: std::io::Read> std::io::Read for bitcoin_io::FromStd<T>
impl<T: std::io::Write> bitcoin_io::Write for bitcoin_io::FromStd<T>
impl<T: std::io::Write> std::io::Write for bitcoin_io::FromStd<T>
impl<T> bitcoin_io::FromStd<T>
impl<T> bitcoin_io::ToStd<T>
impl<T> core::marker::Freeze for bitcoin_io::Cursor<T> where T: core::marker::Freeze
impl<T> core::marker::Freeze for bitcoin_io::FromStd<T> where T: core::marker::Freeze
impl<T> core::marker::Freeze for bitcoin_io::ToStd<T> where T: core::marker::Freeze
impl<T> core::marker::Send for bitcoin_io::Cursor<T> where T: core::marker::Send
impl<T> core::marker::Send for bitcoin_io::FromStd<T> where T: core::marker::Send
impl<T> core::marker::Send for bitcoin_io::ToStd<T> where T: core::marker::Send
impl<T> core::marker::StructuralPartialEq for bitcoin_io::Cursor<T>
impl<T> core::marker::Sync for bitcoin_io::Cursor<T> where T: core::marker::Sync
impl<T> core::marker::Sync for bitcoin_io::FromStd<T> where T: core::marker::Sync
impl<T> core::marker::Sync for bitcoin_io::ToStd<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for bitcoin_io::Cursor<T> where T: core::marker::Unpin
impl<T> core::marker::Unpin for bitcoin_io::FromStd<T> where T: core::marker::Unpin
impl<T> core::marker::Unpin for bitcoin_io::ToStd<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for bitcoin_io::Cursor<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::RefUnwindSafe for bitcoin_io::FromStd<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::RefUnwindSafe for bitcoin_io::ToStd<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for bitcoin_io::Cursor<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for bitcoin_io::FromStd<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for bitcoin_io::ToStd<T> where T: core::panic::unwind_safe::UnwindSafe
impl<W> bitcoin_io::Write for std::io::buffered::bufwriter::BufWriter<W> where W: ?core::marker::Sized + std::io::Write
impl<W> bitcoin_io::Write for std::io::buffered::linewriter::LineWriter<W> where W: ?core::marker::Sized + std::io::Write
pub bitcoin_io::ErrorKind::AddrInUse
pub bitcoin_io::ErrorKind::AddrNotAvailable
pub bitcoin_io::ErrorKind::AlreadyExists
pub bitcoin_io::ErrorKind::BrokenPipe
pub bitcoin_io::ErrorKind::ConnectionAborted
pub bitcoin_io::ErrorKind::ConnectionRefused
pub bitcoin_io::ErrorKind::ConnectionReset
pub bitcoin_io::ErrorKind::Interrupted
pub bitcoin_io::ErrorKind::InvalidData
pub bitcoin_io::ErrorKind::InvalidInput
pub bitcoin_io::ErrorKind::NotConnected
pub bitcoin_io::ErrorKind::NotFound
pub bitcoin_io::ErrorKind::Other
pub bitcoin_io::ErrorKind::PermissionDenied
pub bitcoin_io::ErrorKind::TimedOut
pub bitcoin_io::ErrorKind::UnexpectedEof
pub bitcoin_io::ErrorKind::WouldBlock
pub bitcoin_io::ErrorKind::WriteZero
pub const fn bitcoin_io::Cursor<T>::get_ref(&self) -> &T
pub const fn bitcoin_io::Cursor<T>::new(inner: T) -> Self
pub const fn bitcoin_io::Cursor<T>::position(&self) -> u64
pub const fn bitcoin_io::FromStd<T>::new(inner: T) -> Self
pub const fn bitcoin_io::ToStd<T>::new(inner: T) -> Self
pub const fn bitcoin_io::from_std<T>(std_io: T) -> bitcoin_io::FromStd<T>
pub enum bitcoin_io::ErrorKind
pub extern crate bitcoin_io::hashes
pub fn &[u8]::consume(&mut self, amount: usize)
pub fn &[u8]::fill_buf(&mut self) -> bitcoin_io::Result<&[u8]>
pub fn &[u8]::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn &mut T::consume(&mut self, amount: usize)
pub fn &mut T::fill_buf(&mut self) -> bitcoin_io::Result<&[u8]>
pub fn &mut T::flush(&mut self) -> bitcoin_io::Result<()>
pub fn &mut T::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn &mut T::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn &mut T::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn &mut T::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn &mut [u8]::flush(&mut self) -> bitcoin_io::Result<()>
pub fn &mut [u8]::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn &std::fs::File::flush(&mut self) -> bitcoin_io::Result<()>
pub fn &std::fs::File::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn &std::fs::File::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn &std::fs::File::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn &std::fs::File::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn &std::io::stdio::Stderr::flush(&mut self) -> bitcoin_io::Result<()>
pub fn &std::io::stdio::Stderr::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn &std::io::stdio::Stderr::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn &std::io::stdio::Stdin::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn &std::io::stdio::Stdin::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn &std::io::stdio::Stdout::flush(&mut self) -> bitcoin_io::Result<()>
pub fn &std::io::stdio::Stdout::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn &std::io::stdio::Stdout::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn &std::io::util::Empty::flush(&mut self) -> bitcoin_io::Result<()>
pub fn &std::io::util::Empty::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn &std::io::util::Empty::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn &std::net::tcp::TcpStream::flush(&mut self) -> bitcoin_io::Result<()>
pub fn &std::net::tcp::TcpStream::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn &std::net::tcp::TcpStream::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn &std::net::tcp::TcpStream::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn &std::net::tcp::TcpStream::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn &std::os::unix::net::stream::UnixStream::flush(&mut self) -> bitcoin_io::Result<()>
pub fn &std::os::unix::net::stream::UnixStream::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn &std::os::unix::net::stream::UnixStream::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn &std::os::unix::net::stream::UnixStream::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn &std::os::unix::net::stream::UnixStream::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn &std::process::ChildStdin::flush(&mut self) -> bitcoin_io::Result<()>
pub fn &std::process::ChildStdin::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn &std::process::ChildStdin::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn alloc::collections::vec_deque::VecDeque<u8>::consume(&mut self, amount: usize)
pub fn alloc::collections::vec_deque::VecDeque<u8>::fill_buf(&mut self) -> bitcoin_io::Result<&[u8]>
pub fn alloc::collections::vec_deque::VecDeque<u8>::flush(&mut self) -> bitcoin_io::Result<()>
pub fn alloc::collections::vec_deque::VecDeque<u8>::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn alloc::collections::vec_deque::VecDeque<u8>::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn alloc::collections::vec_deque::VecDeque<u8>::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn alloc::collections::vec_deque::VecDeque<u8>::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn alloc::sync::Arc<std::fs::File>::flush(&mut self) -> bitcoin_io::Result<()>
pub fn alloc::sync::Arc<std::fs::File>::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn alloc::sync::Arc<std::fs::File>::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn alloc::sync::Arc<std::fs::File>::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn alloc::sync::Arc<std::fs::File>::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn alloc::vec::Vec<u8>::flush(&mut self) -> bitcoin_io::Result<()>
pub fn alloc::vec::Vec<u8>::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_hashes::hash160::HashEngine::flush(&mut self) -> bitcoin_io::Result<()>
pub fn bitcoin_hashes::hash160::HashEngine::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_hashes::hmac::HmacEngine<T>::flush(&mut self) -> bitcoin_io::Result<()>
pub fn bitcoin_hashes::hmac::HmacEngine<T>::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_hashes::ripemd160::HashEngine::flush(&mut self) -> bitcoin_io::Result<()>
pub fn bitcoin_hashes::ripemd160::HashEngine::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_hashes::sha1::HashEngine::flush(&mut self) -> bitcoin_io::Result<()>
pub fn bitcoin_hashes::sha1::HashEngine::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_hashes::sha256::HashEngine::flush(&mut self) -> bitcoin_io::Result<()>
pub fn bitcoin_hashes::sha256::HashEngine::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_hashes::sha256d::HashEngine::flush(&mut self) -> bitcoin_io::Result<()>
pub fn bitcoin_hashes::sha256d::HashEngine::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_hashes::sha256t::HashEngine<T>::flush(&mut self) -> bitcoin_io::Result<()>
pub fn bitcoin_hashes::sha256t::HashEngine<T>::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_hashes::sha384::HashEngine::flush(&mut self) -> bitcoin_io::Result<()>
pub fn bitcoin_hashes::sha384::HashEngine::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_hashes::sha512::HashEngine::flush(&mut self) -> bitcoin_io::Result<()>
pub fn bitcoin_hashes::sha512::HashEngine::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_hashes::sha512_256::HashEngine::flush(&mut self) -> bitcoin_io::Result<()>
pub fn bitcoin_hashes::sha512_256::HashEngine::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_hashes::siphash24::HashEngine::flush(&mut self) -> bitcoin_io::Result<()>
pub fn bitcoin_hashes::siphash24::HashEngine::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_io::BufRead::consume(&mut self, amount: usize)
pub fn bitcoin_io::BufRead::fill_buf(&mut self) -> bitcoin_io::Result<&[u8]>
pub fn bitcoin_io::Cursor<T>::clone(&self) -> bitcoin_io::Cursor<T>
pub fn bitcoin_io::Cursor<T>::consume(&mut self, amount: usize)
pub fn bitcoin_io::Cursor<T>::default() -> bitcoin_io::Cursor<T>
pub fn bitcoin_io::Cursor<T>::eq(&self, other: &bitcoin_io::Cursor<T>) -> bool
pub fn bitcoin_io::Cursor<T>::fill_buf(&mut self) -> bitcoin_io::Result<&[u8]>
pub fn bitcoin_io::Cursor<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
pub fn bitcoin_io::Cursor<T>::get_mut(&mut self) -> &mut T
pub fn bitcoin_io::Cursor<T>::inner(&self) -> &T
pub fn bitcoin_io::Cursor<T>::into_inner(self) -> T
pub fn bitcoin_io::Cursor<T>::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_io::Cursor<T>::set_position(&mut self, position: u64)
pub fn bitcoin_io::Error::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
pub fn bitcoin_io::Error::fmt(&self, fmt: &mut core::fmt::Formatter<'_>) -> core::result::Result<(), core::fmt::Error>
pub fn bitcoin_io::Error::from(kind: bitcoin_io::ErrorKind) -> bitcoin_io::Error
pub fn bitcoin_io::Error::from(o: std::io::error::Error) -> bitcoin_io::Error
pub fn bitcoin_io::Error::get_ref(&self) -> core::option::Option<&(dyn core::error::Error + core::marker::Send + core::marker::Sync + 'static)>
pub fn bitcoin_io::Error::kind(&self) -> bitcoin_io::ErrorKind
pub fn bitcoin_io::Error::new<E>(kind: bitcoin_io::ErrorKind, error: E) -> bitcoin_io::Error where E: core::convert::Into<alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync + 'static)>>
pub fn bitcoin_io::Error::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
pub fn bitcoin_io::ErrorKind::clone(&self) -> bitcoin_io::ErrorKind
pub fn bitcoin_io::ErrorKind::eq(&self, other: &bitcoin_io::ErrorKind) -> bool
pub fn bitcoin_io::ErrorKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
pub fn bitcoin_io::ErrorKind::from(never: core::convert::Infallible) -> Self
pub fn bitcoin_io::ErrorKind::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
pub fn bitcoin_io::FromStd<T>::consume(&mut self, amount: usize)
pub fn bitcoin_io::FromStd<T>::fill_buf(&mut self) -> bitcoin_io::Result<&[u8]>
pub fn bitcoin_io::FromStd<T>::fill_buf(&mut self) -> std::io::error::Result<&[u8]>
pub fn bitcoin_io::FromStd<T>::flush(&mut self) -> bitcoin_io::Result<()>
pub fn bitcoin_io::FromStd<T>::flush(&mut self) -> std::io::error::Result<()>
pub fn bitcoin_io::FromStd<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
pub fn bitcoin_io::FromStd<T>::get_mut(&mut self) -> &mut T
pub fn bitcoin_io::FromStd<T>::get_ref(&self) -> &T
pub fn bitcoin_io::FromStd<T>::inner(&self) -> &T
pub fn bitcoin_io::FromStd<T>::inner_mut(&mut self) -> &mut T
pub fn bitcoin_io::FromStd<T>::into_inner(self) -> T
pub fn bitcoin_io::FromStd<T>::new_mut(inner: &mut T) -> &mut Self
pub fn bitcoin_io::FromStd<T>::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_io::FromStd<T>::read(&mut self, buf: &mut [u8]) -> std::io::error::Result<usize>
pub fn bitcoin_io::FromStd<T>::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn bitcoin_io::FromStd<T>::read_exact(&mut self, buf: &mut [u8]) -> std::io::error::Result<()>
pub fn bitcoin_io::FromStd<T>::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_io::FromStd<T>::write(&mut self, buf: &[u8]) -> std::io::error::Result<usize>
pub fn bitcoin_io::FromStd<T>::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn bitcoin_io::FromStd<T>::write_all(&mut self, buf: &[u8]) -> std::io::error::Result<()>
pub fn bitcoin_io::Read::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_io::Read::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn bitcoin_io::Read::read_to_limit(&mut self, buf: &mut alloc::vec::Vec<u8>, limit: u64) -> bitcoin_io::Result<usize>
pub fn bitcoin_io::Read::take(&mut self, limit: u64) -> bitcoin_io::Take<'_, Self>
pub fn bitcoin_io::Sink::clone(&self) -> bitcoin_io::Sink
pub fn bitcoin_io::Sink::default() -> bitcoin_io::Sink
pub fn bitcoin_io::Sink::flush(&mut self) -> bitcoin_io::Result<()>
pub fn bitcoin_io::Sink::flush(&mut self) -> std::io::error::Result<()>
pub fn bitcoin_io::Sink::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
pub fn bitcoin_io::Sink::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_io::Sink::write(&mut self, buf: &[u8]) -> std::io::error::Result<usize>
pub fn bitcoin_io::Sink::write_all(&mut self, _: &[u8]) -> bitcoin_io::Result<()>
pub fn bitcoin_io::Sink::write_all(&mut self, _: &[u8]) -> std::io::error::Result<()>
pub fn bitcoin_io::Take<'_, R>::consume(&mut self, amount: usize)
pub fn bitcoin_io::Take<'_, R>::fill_buf(&mut self) -> bitcoin_io::Result<&[u8]>
pub fn bitcoin_io::Take<'_, R>::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_io::Take<'_, R>::read_to_end(&mut self, buf: &mut alloc::vec::Vec<u8>) -> bitcoin_io::Result<usize>
pub fn bitcoin_io::Take<'a, R>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
pub fn bitcoin_io::ToStd<T>::consume(&mut self, amount: usize)
pub fn bitcoin_io::ToStd<T>::fill_buf(&mut self) -> bitcoin_io::Result<&[u8]>
pub fn bitcoin_io::ToStd<T>::fill_buf(&mut self) -> std::io::error::Result<&[u8]>
pub fn bitcoin_io::ToStd<T>::flush(&mut self) -> bitcoin_io::Result<()>
pub fn bitcoin_io::ToStd<T>::flush(&mut self) -> std::io::error::Result<()>
pub fn bitcoin_io::ToStd<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
pub fn bitcoin_io::ToStd<T>::inner(&self) -> &T
pub fn bitcoin_io::ToStd<T>::inner_mut(&mut self) -> &mut T
pub fn bitcoin_io::ToStd<T>::into_inner(self) -> T
pub fn bitcoin_io::ToStd<T>::new_mut(inner: &mut T) -> &mut Self
pub fn bitcoin_io::ToStd<T>::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_io::ToStd<T>::read(&mut self, buf: &mut [u8]) -> std::io::error::Result<usize>
pub fn bitcoin_io::ToStd<T>::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn bitcoin_io::ToStd<T>::read_exact(&mut self, buf: &mut [u8]) -> std::io::error::Result<()>
pub fn bitcoin_io::ToStd<T>::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_io::ToStd<T>::write(&mut self, buf: &[u8]) -> std::io::error::Result<usize>
pub fn bitcoin_io::ToStd<T>::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn bitcoin_io::ToStd<T>::write_all(&mut self, buf: &[u8]) -> std::io::error::Result<()>
pub fn bitcoin_io::Write::flush(&mut self) -> bitcoin_io::Result<()>
pub fn bitcoin_io::Write::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn bitcoin_io::Write::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn bitcoin_io::from_std_mut<T>(std_io: &mut T) -> &mut bitcoin_io::FromStd<T>
pub fn bitcoin_io::hash_reader<T>(reader: &mut impl bitcoin_io::BufRead) -> core::result::Result<<T as bitcoin_hashes::HashEngine>::Hash, bitcoin_io::Error> where T: bitcoin_hashes::HashEngine + core::default::Default
pub fn bitcoin_io::sink() -> bitcoin_io::Sink
pub fn std::fs::File::flush(&mut self) -> bitcoin_io::Result<()>
pub fn std::fs::File::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn std::fs::File::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn std::fs::File::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn std::fs::File::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn std::io::Chain<R1, R2>::consume(&mut self, amount: usize)
pub fn std::io::Chain<R1, R2>::fill_buf(&mut self) -> bitcoin_io::Result<&[u8]>
pub fn std::io::Chain<R1, R2>::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn std::io::Chain<R1, R2>::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn std::io::Take<R>::consume(&mut self, amount: usize)
pub fn std::io::Take<R>::fill_buf(&mut self) -> bitcoin_io::Result<&[u8]>
pub fn std::io::Take<R>::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn std::io::Take<R>::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn std::io::buffered::bufreader::BufReader<R>::consume(&mut self, amount: usize)
pub fn std::io::buffered::bufreader::BufReader<R>::fill_buf(&mut self) -> bitcoin_io::Result<&[u8]>
pub fn std::io::buffered::bufreader::BufReader<R>::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn std::io::buffered::bufreader::BufReader<R>::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn std::io::buffered::bufwriter::BufWriter<W>::flush(&mut self) -> bitcoin_io::Result<()>
pub fn std::io::buffered::bufwriter::BufWriter<W>::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn std::io::buffered::bufwriter::BufWriter<W>::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn std::io::buffered::linewriter::LineWriter<W>::flush(&mut self) -> bitcoin_io::Result<()>
pub fn std::io::buffered::linewriter::LineWriter<W>::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn std::io::buffered::linewriter::LineWriter<W>::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn std::io::cursor::Cursor<&mut alloc::vec::Vec<u8>>::flush(&mut self) -> bitcoin_io::Result<()>
pub fn std::io::cursor::Cursor<&mut alloc::vec::Vec<u8>>::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn std::io::cursor::Cursor<&mut alloc::vec::Vec<u8>>::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn std::io::cursor::Cursor<T>::consume(&mut self, amount: usize)
pub fn std::io::cursor::Cursor<T>::fill_buf(&mut self) -> bitcoin_io::Result<&[u8]>
pub fn std::io::cursor::Cursor<T>::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn std::io::cursor::Cursor<T>::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn std::io::cursor::Cursor<alloc::boxed::Box<[u8]>>::flush(&mut self) -> bitcoin_io::Result<()>
pub fn std::io::cursor::Cursor<alloc::boxed::Box<[u8]>>::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn std::io::cursor::Cursor<alloc::boxed::Box<[u8]>>::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn std::io::cursor::Cursor<alloc::vec::Vec<u8>>::flush(&mut self) -> bitcoin_io::Result<()>
pub fn std::io::cursor::Cursor<alloc::vec::Vec<u8>>::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn std::io::cursor::Cursor<alloc::vec::Vec<u8>>::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn std::io::error::Error::from(o: bitcoin_io::Error) -> std::io::error::Error
pub fn std::io::stdio::Stderr::flush(&mut self) -> bitcoin_io::Result<()>
pub fn std::io::stdio::Stderr::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn std::io::stdio::Stderr::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn std::io::stdio::Stdin::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn std::io::stdio::Stdin::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn std::io::stdio::StdinLock<'_>::consume(&mut self, amount: usize)
pub fn std::io::stdio::StdinLock<'_>::fill_buf(&mut self) -> bitcoin_io::Result<&[u8]>
pub fn std::io::stdio::StdinLock<'_>::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn std::io::stdio::StdinLock<'_>::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn std::io::stdio::Stdout::flush(&mut self) -> bitcoin_io::Result<()>
pub fn std::io::stdio::Stdout::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn std::io::stdio::Stdout::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn std::io::util::Empty::consume(&mut self, amount: usize)
pub fn std::io::util::Empty::fill_buf(&mut self) -> bitcoin_io::Result<&[u8]>
pub fn std::io::util::Empty::flush(&mut self) -> bitcoin_io::Result<()>
pub fn std::io::util::Empty::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn std::io::util::Empty::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn std::io::util::Empty::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn std::io::util::Empty::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn std::io::util::Repeat::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn std::io::util::Repeat::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn std::net::tcp::TcpStream::flush(&mut self) -> bitcoin_io::Result<()>
pub fn std::net::tcp::TcpStream::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn std::net::tcp::TcpStream::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn std::net::tcp::TcpStream::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn std::net::tcp::TcpStream::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn std::os::unix::net::stream::UnixStream::flush(&mut self) -> bitcoin_io::Result<()>
pub fn std::os::unix::net::stream::UnixStream::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn std::os::unix::net::stream::UnixStream::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn std::os::unix::net::stream::UnixStream::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn std::os::unix::net::stream::UnixStream::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn std::process::ChildStderr::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn std::process::ChildStderr::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub fn std::process::ChildStdin::flush(&mut self) -> bitcoin_io::Result<()>
pub fn std::process::ChildStdin::write(&mut self, buf: &[u8]) -> bitcoin_io::Result<usize>
pub fn std::process::ChildStdin::write_all(&mut self, buf: &[u8]) -> bitcoin_io::Result<()>
pub fn std::process::ChildStdout::read(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<usize>
pub fn std::process::ChildStdout::read_exact(&mut self, buf: &mut [u8]) -> bitcoin_io::Result<()>
pub mod bitcoin_io
pub struct bitcoin_io::Cursor<T>
pub struct bitcoin_io::Error
pub struct bitcoin_io::FromStd<T>(_)
pub struct bitcoin_io::Sink
pub struct bitcoin_io::Take<'a, R: bitcoin_io::Read + ?core::marker::Sized>
pub struct bitcoin_io::ToStd<T>(_)
pub trait bitcoin_io::BufRead: bitcoin_io::Read
pub trait bitcoin_io::Read
pub trait bitcoin_io::Write
pub type bitcoin_io::Result<T> = core::result::Result<T, bitcoin_io::Error>
